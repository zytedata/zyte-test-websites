apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "zyte-test-websites.name" . }}
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "zyte-test-websites.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "zyte-test-websites.selectorLabels" . | indent 6 }}
  strategy:
{{ toYaml .Values.updateStrategy | indent 4 }}
  template:
    metadata:
      labels:
        {{- include "zyte-test-websites.selectorLabels" . | indent 8 }}
      annotations:
        {{- if .Values.podAnnotations }}
        {{- toYaml .Values.podAnnotations | nindent 8 }}
        {{- end }}
    spec:
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      enableServiceLinks: false
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ include "zyte-test-websites.name" . }}
              topologyKey: kubernetes.io/hostname
      restartPolicy: {{ .Values.restartPolicy }}
      terminationGracePeriodSeconds: 150
      containers:
        - name: web
          image: "{{ .Values.image }}:{{ .Values.version }}"
          imagePullPolicy: IfNotPresent
          args:
            - {{ required "A type of test website must be provided! [jobs|ecommerce|articles]"  .Values.websiteName }}
          {{- if .Values.env }}
          env:
          {{- range $key, $value := .Values.env }}
          - name: {{ $key }}
            value: "{{ $value }}"
          {{- end }}
          {{- end }}
          resources: {{ toYaml .Values.resources | nindent 12 }}
          ports:
            - name: http
              containerPort: {{ .Values.service.containerPort | default "80" }}
              protocol: TCP
          {{- with .Values.livenessProbe }}
          livenessProbe:
            httpGet:
              path: {{ .path }}
              port: {{ .port }}
            initialDelaySeconds: {{ default .initialDelaySeconds 30 }}
            periodSeconds: {{ default .periodSeconds 10 }}
            successThreshold: {{ default .successThreshold 1 }}
            failureThreshold: {{ default .failureThreshold 3 }}
            timeoutSeconds: {{ default .timeoutSeconds 10 }}
          {{- end }}
          {{- with .Values.readinessProbe }}
          readinessProbe:
            httpGet:
              path: {{ .path }}
              port: {{ .port }}
            periodSeconds: {{ default .periodSeconds 10 }}
            successThreshold: {{ default .successThreshold 1 }}
            failureThreshold: {{ default .failureThreshold 3 }}
            timeoutSeconds: {{ default .timeoutSeconds 10 }}
          {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets: {{ toYaml .Values.imagePullSecrets | nindent 8 }}
      {{- end }}
